name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECS_TASK_DEFINITION: ${{ github.workspace }}/task-definition.json
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Build migration Docker image
        run: docker build -t migrate -f Dockerfile.migrate .
  
      - name: Run database migration
        env:
          RDS_DSN: ${{ secrets.RDS_DSN }}
        run: docker run --rm -e RDS_DSN=$RDS_DSN migrate
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # ECSタスクの作成がうまくいかないが、一旦良しとする
      # - name: Replace placeholders in task-definition.json
      #   env:
      #     ECR_IMAGE: ${{ secrets.ECR_IMAGE }}
      #     S3_ARN: ${{ secrets.S3_ARN }}
      #     AWS_LOGS_GROUP: ${{ secrets.AWS_LOGS_GROUP }}
      #     TASK_ROLE_ARN: ${{ secrets.TASK_ROLE_ARN }}

      #   run: |
      #     sed -i "s|{{ S3_ARN }}|${{ env.S3_ARN }}|g" ${{ env.ECS_TASK_DEFINITION }}
      #     sed -i "s|{{ ECR_IMAGE }}|${{ env.ECR_IMAGE }}|g" ${{ env.ECS_TASK_DEFINITION }}
      #     sed -i "s|{{ AWS_LOGS_GROUP }}|${{ env.AWS_LOGS_GROUP }}|g" ${{ env.ECS_TASK_DEFINITION }}
      #     sed -i "s|{{ AWS_REGION }}|${{ env.AWS_REGION }}|g" ${{ env.ECS_TASK_DEFINITION }}
      #     sed -i "s|{{ TASK_ROLE_ARN }}|${{ env.TASK_ROLE_ARN }}|g" ${{ env.ECS_TASK_DEFINITION }}

      # - name: Debug task-definition.json
      #   run: cat ${{ github.workspace }}/task-definition.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Debug generated task-definition.json
      #   run: cat ${{ steps.task-def.outputs.task-definition }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   env:
      #     ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      #     ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
